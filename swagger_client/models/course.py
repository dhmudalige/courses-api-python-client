# coding: utf-8

"""
    Courses API

    This API can be used to obtain the information of the courses in the Department of Computer Engineering, University of Peradeniya  # noqa: E501

    OpenAPI spec version: v1
    Contact: e18227@eng.pdn.ac.lk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Course(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'credits': 'int',
        'core_or_elective': 'str',
        'prerequisites': 'list[str]',
        'course_content': 'str',
        'objectives': 'str',
        'il_os': 'object',
        'allocation': 'str',
        'modules': 'list[object]',
        'references': 'list[str]',
        'marks': 'object',
        'lecturers': 'list[object]',
        'url': 'str'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'credits': 'credits',
        'core_or_elective': 'core_or_elective',
        'prerequisites': 'prerequisites',
        'course_content': 'course_content',
        'objectives': 'objectives',
        'il_os': 'ILOs',
        'allocation': 'allocation',
        'modules': 'modules',
        'references': 'references',
        'marks': 'marks',
        'lecturers': 'lecturers',
        'url': 'url'
    }

    def __init__(self, code=None, name=None, credits=None, core_or_elective=None, prerequisites=None, course_content=None, objectives=None, il_os=None, allocation=None, modules=None, references=None, marks=None, lecturers=None, url=None, _configuration=None):  # noqa: E501
        """Course - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._name = None
        self._credits = None
        self._core_or_elective = None
        self._prerequisites = None
        self._course_content = None
        self._objectives = None
        self._il_os = None
        self._allocation = None
        self._modules = None
        self._references = None
        self._marks = None
        self._lecturers = None
        self._url = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if credits is not None:
            self.credits = credits
        if core_or_elective is not None:
            self.core_or_elective = core_or_elective
        if prerequisites is not None:
            self.prerequisites = prerequisites
        if course_content is not None:
            self.course_content = course_content
        if objectives is not None:
            self.objectives = objectives
        if il_os is not None:
            self.il_os = il_os
        if allocation is not None:
            self.allocation = allocation
        if modules is not None:
            self.modules = modules
        if references is not None:
            self.references = references
        if marks is not None:
            self.marks = marks
        if lecturers is not None:
            self.lecturers = lecturers
        if url is not None:
            self.url = url

    @property
    def code(self):
        """Gets the code of this Course.  # noqa: E501

        Course Code  # noqa: E501

        :return: The code of this Course.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Course.

        Course Code  # noqa: E501

        :param code: The code of this Course.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code is not None and not re.search(r'^[a-z]{2}d{3}$', code)):  # noqa: E501
            raise ValueError(r"Invalid value for `code`, must be a follow pattern or equal to `/^[a-z]{2}d{3}$/`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this Course.  # noqa: E501

        Course Name  # noqa: E501

        :return: The name of this Course.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Course.

        Course Name  # noqa: E501

        :param name: The name of this Course.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def credits(self):
        """Gets the credits of this Course.  # noqa: E501

        Credits  # noqa: E501

        :return: The credits of this Course.  # noqa: E501
        :rtype: int
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this Course.

        Credits  # noqa: E501

        :param credits: The credits of this Course.  # noqa: E501
        :type: int
        """

        self._credits = credits

    @property
    def core_or_elective(self):
        """Gets the core_or_elective of this Course.  # noqa: E501

        Core or Elective  # noqa: E501

        :return: The core_or_elective of this Course.  # noqa: E501
        :rtype: str
        """
        return self._core_or_elective

    @core_or_elective.setter
    def core_or_elective(self, core_or_elective):
        """Sets the core_or_elective of this Course.

        Core or Elective  # noqa: E501

        :param core_or_elective: The core_or_elective of this Course.  # noqa: E501
        :type: str
        """

        self._core_or_elective = core_or_elective

    @property
    def prerequisites(self):
        """Gets the prerequisites of this Course.  # noqa: E501

        Prerequisites  # noqa: E501

        :return: The prerequisites of this Course.  # noqa: E501
        :rtype: list[str]
        """
        return self._prerequisites

    @prerequisites.setter
    def prerequisites(self, prerequisites):
        """Sets the prerequisites of this Course.

        Prerequisites  # noqa: E501

        :param prerequisites: The prerequisites of this Course.  # noqa: E501
        :type: list[str]
        """

        self._prerequisites = prerequisites

    @property
    def course_content(self):
        """Gets the course_content of this Course.  # noqa: E501

        Course Contents  # noqa: E501

        :return: The course_content of this Course.  # noqa: E501
        :rtype: str
        """
        return self._course_content

    @course_content.setter
    def course_content(self, course_content):
        """Sets the course_content of this Course.

        Course Contents  # noqa: E501

        :param course_content: The course_content of this Course.  # noqa: E501
        :type: str
        """

        self._course_content = course_content

    @property
    def objectives(self):
        """Gets the objectives of this Course.  # noqa: E501

        Objectives of the course  # noqa: E501

        :return: The objectives of this Course.  # noqa: E501
        :rtype: str
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this Course.

        Objectives of the course  # noqa: E501

        :param objectives: The objectives of this Course.  # noqa: E501
        :type: str
        """

        self._objectives = objectives

    @property
    def il_os(self):
        """Gets the il_os of this Course.  # noqa: E501


        :return: The il_os of this Course.  # noqa: E501
        :rtype: object
        """
        return self._il_os

    @il_os.setter
    def il_os(self, il_os):
        """Sets the il_os of this Course.


        :param il_os: The il_os of this Course.  # noqa: E501
        :type: object
        """

        self._il_os = il_os

    @property
    def allocation(self):
        """Gets the allocation of this Course.  # noqa: E501

        Total time allocations for different sessions of the given course  # noqa: E501

        :return: The allocation of this Course.  # noqa: E501
        :rtype: str
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this Course.

        Total time allocations for different sessions of the given course  # noqa: E501

        :param allocation: The allocation of this Course.  # noqa: E501
        :type: str
        """

        self._allocation = allocation

    @property
    def modules(self):
        """Gets the modules of this Course.  # noqa: E501

        Modules of a given course  # noqa: E501

        :return: The modules of this Course.  # noqa: E501
        :rtype: list[object]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this Course.

        Modules of a given course  # noqa: E501

        :param modules: The modules of this Course.  # noqa: E501
        :type: list[object]
        """

        self._modules = modules

    @property
    def references(self):
        """Gets the references of this Course.  # noqa: E501

        Useful reference materials of the given course  # noqa: E501

        :return: The references of this Course.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Course.

        Useful reference materials of the given course  # noqa: E501

        :param references: The references of this Course.  # noqa: E501
        :type: list[str]
        """

        self._references = references

    @property
    def marks(self):
        """Gets the marks of this Course.  # noqa: E501

        Marks allocated for different sessions of the given course  # noqa: E501

        :return: The marks of this Course.  # noqa: E501
        :rtype: object
        """
        return self._marks

    @marks.setter
    def marks(self, marks):
        """Sets the marks of this Course.

        Marks allocated for different sessions of the given course  # noqa: E501

        :param marks: The marks of this Course.  # noqa: E501
        :type: object
        """

        self._marks = marks

    @property
    def lecturers(self):
        """Gets the lecturers of this Course.  # noqa: E501

        Lecturers of the given course  # noqa: E501

        :return: The lecturers of this Course.  # noqa: E501
        :rtype: list[object]
        """
        return self._lecturers

    @lecturers.setter
    def lecturers(self, lecturers):
        """Sets the lecturers of this Course.

        Lecturers of the given course  # noqa: E501

        :param lecturers: The lecturers of this Course.  # noqa: E501
        :type: list[object]
        """

        self._lecturers = lecturers

    @property
    def url(self):
        """Gets the url of this Course.  # noqa: E501

        URL for the course details  # noqa: E501

        :return: The url of this Course.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Course.

        URL for the course details  # noqa: E501

        :param url: The url of this Course.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Course, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Course):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Course):
            return True

        return self.to_dict() != other.to_dict()
